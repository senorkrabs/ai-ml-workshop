{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI/ML Workshop Agenda Day 1 Time Topic 9:00 - 12:00 Introduction to Machine Learning on AWS 12:00 - 13:00 Lunch 13:00 - 14:00 Personalize - recommendation engine 14:00 - 17:00 Lab 1 - SageMaker and Customer churn analysis Day 2 Time Topic 9:00 - 12:00 Introduction to AI and Machine Learning Services on AWS 12:00 - 13:00 Lunch 13:00 - 15:00 Lab 2 - Web application with Transcribe and Comprehend 15:00 - 17:00 Lab 3 - DeepRacer (optional)","title":"Introduction"},{"location":"#aiml-workshop","text":"","title":"AI/ML Workshop"},{"location":"#agenda","text":"","title":"Agenda"},{"location":"#day-1","text":"Time Topic 9:00 - 12:00 Introduction to Machine Learning on AWS 12:00 - 13:00 Lunch 13:00 - 14:00 Personalize - recommendation engine 14:00 - 17:00 Lab 1 - SageMaker and Customer churn analysis","title":"Day 1"},{"location":"#day-2","text":"Time Topic 9:00 - 12:00 Introduction to AI and Machine Learning Services on AWS 12:00 - 13:00 Lunch 13:00 - 15:00 Lab 2 - Web application with Transcribe and Comprehend 15:00 - 17:00 Lab 3 - DeepRacer (optional)","title":"Day 2"},{"location":"module_0_Setup/","text":"Setup To get your account for the lab - please go to https://static.myoctank.net/public/umd-ai-workshop.html Please find your lab user name and save the URL. This link will be unavailable soon. Code repo: https://github.com/jxuamazon/ai-ml-workshop Download https://static.myoctank.net/public/ai-ml-workshop.zip to a local folder. We will use it for lab 2.","title":"Setup"},{"location":"module_0_Setup/#setup","text":"To get your account for the lab - please go to https://static.myoctank.net/public/umd-ai-workshop.html Please find your lab user name and save the URL. This link will be unavailable soon. Code repo: https://github.com/jxuamazon/ai-ml-workshop Download https://static.myoctank.net/public/ai-ml-workshop.zip to a local folder. We will use it for lab 2.","title":"Setup"},{"location":"module_1_Lab_1_Customer_Churn_Analysis/","text":"Lab 1 - Customer Churn Analysis Excerpt From this blog post 'Losing customers is costly for any business. Identifying unhappy customers early on gives you a chance to offer them incentives to stay. This post describes using machine learning (ML) for the automated identification of unhappy customers, also known as customer churn prediction. ML models rarely give perfect predictions though, so my post is also about how to incorporate the relative costs of prediction mistakes when determining the financial outcome of using ML.' I use an example of churn that is familiar to all of us\u2013leaving a mobile phone operator. Seems like I can always find fault with my provider du jour! And if my provider knows that I\u2019m thinking of leaving, it can offer timely incentives\u2013I can always use a phone upgrade or perhaps have a new feature activated\u2013and I might just stick around. Incentives are often much more cost effective than losing and reacquiring a customer. Instruction: From AWS Console, Goto SageMaker Notebook instances -> ml-workshop-notebook -> Open Jupyter Open new terminal (under Files tab, far right: New/Terminal) In the terminal window: %cd SageMaker %git clone https://github.com/jxuamazon/ai-ml-workshop In Jupyter Notebook open ai-ml-workshop/lab-customer-churn/customer_churn_demo.ipynb Kernel/Restart and Clear Output \"Run\" go through each step","title":"Lab 1 - Customer Churn"},{"location":"module_1_Lab_1_Customer_Churn_Analysis/#lab-1-customer-churn-analysis","text":"","title":"Lab 1 - Customer Churn Analysis"},{"location":"module_1_Lab_1_Customer_Churn_Analysis/#excerpt","text":"From this blog post 'Losing customers is costly for any business. Identifying unhappy customers early on gives you a chance to offer them incentives to stay. This post describes using machine learning (ML) for the automated identification of unhappy customers, also known as customer churn prediction. ML models rarely give perfect predictions though, so my post is also about how to incorporate the relative costs of prediction mistakes when determining the financial outcome of using ML.' I use an example of churn that is familiar to all of us\u2013leaving a mobile phone operator. Seems like I can always find fault with my provider du jour! And if my provider knows that I\u2019m thinking of leaving, it can offer timely incentives\u2013I can always use a phone upgrade or perhaps have a new feature activated\u2013and I might just stick around. Incentives are often much more cost effective than losing and reacquiring a customer.","title":"Excerpt"},{"location":"module_1_Lab_1_Customer_Churn_Analysis/#instruction","text":"From AWS Console, Goto SageMaker Notebook instances -> ml-workshop-notebook -> Open Jupyter Open new terminal (under Files tab, far right: New/Terminal) In the terminal window: %cd SageMaker %git clone https://github.com/jxuamazon/ai-ml-workshop In Jupyter Notebook open ai-ml-workshop/lab-customer-churn/customer_churn_demo.ipynb Kernel/Restart and Clear Output \"Run\" go through each step","title":"Instruction:"},{"location":"module_2_Lab_2_Sentiment_from_voice/","text":"Lab 2 - Extract Sentiments from Voice using Amazon Transcribe and Comprehend This application is based on this aws sample with modification to add comprehend sentiment extraction. Instruction: Login to AWS Console Goto IAM -> Users -> transcribe-user -> Security Credentials -> Create access key. Recordthe Access key ID and Secret access key for later use From AWS Console/Services: Go to \"AWS Amplify\" - Expand the menu icon on the left -> All apps -> \"Connect app\" - chose Deploy without Git provider - Fill in \"App name\", \"Environment Name\" and use \"Drag and Drop\" : ai-ml-workshop.zip - Save and Deploy - Once deployment is completed, click on the \"Demo Transcribe and Comprehend application\" link below Demo Transcribe and Comprehend application If you use Git provider (e.g Github), you can automatically redeploy the app whenever new code is checked in. And Amplify will take care of the build and deployment for you. Using Cloud9 IDE to work with the code From AWS Console -> Cloud9 Create an environment, with t3.small Once Cloud9 environment is up File -> upload local files : select the ai-ml-workshop.zip file you downloaded In the console window, unzip ai-ml-workshop.zip Or you can clone the soruce in the terminal window : git clone https://github.com/jxuamazon/ai-ml-workshop","title":"Lab 2 - Sentiment from Voice"},{"location":"module_2_Lab_2_Sentiment_from_voice/#lab-2-extract-sentiments-from-voice-using-amazon-transcribe-and-comprehend","text":"This application is based on this aws sample with modification to add comprehend sentiment extraction.","title":"Lab 2 - Extract Sentiments from Voice using Amazon Transcribe and Comprehend"},{"location":"module_2_Lab_2_Sentiment_from_voice/#instruction","text":"Login to AWS Console Goto IAM -> Users -> transcribe-user -> Security Credentials -> Create access key. Recordthe Access key ID and Secret access key for later use From AWS Console/Services: Go to \"AWS Amplify\" - Expand the menu icon on the left -> All apps -> \"Connect app\" - chose Deploy without Git provider - Fill in \"App name\", \"Environment Name\" and use \"Drag and Drop\" : ai-ml-workshop.zip - Save and Deploy - Once deployment is completed, click on the \"Demo Transcribe and Comprehend application\" link below Demo Transcribe and Comprehend application If you use Git provider (e.g Github), you can automatically redeploy the app whenever new code is checked in. And Amplify will take care of the build and deployment for you.","title":"Instruction:"},{"location":"module_2_Lab_2_Sentiment_from_voice/#using-cloud9-ide-to-work-with-the-code","text":"From AWS Console -> Cloud9 Create an environment, with t3.small Once Cloud9 environment is up File -> upload local files : select the ai-ml-workshop.zip file you downloaded In the console window, unzip ai-ml-workshop.zip Or you can clone the soruce in the terminal window : git clone https://github.com/jxuamazon/ai-ml-workshop","title":"Using Cloud9 IDE to work with the code"},{"location":"module_3_Lab_3_DeepRacer/","text":"Lab 3 - DeepRacer Instruction: From AWS Console - DeepRacer Create a new model Modify the reward function - use example reward functions Use RoboMaker to view the simulation","title":"Lab 3 - DeepRacer"},{"location":"module_3_Lab_3_DeepRacer/#lab-3-deepracer","text":"","title":"Lab 3 - DeepRacer"},{"location":"module_3_Lab_3_DeepRacer/#instruction","text":"From AWS Console - DeepRacer Create a new model Modify the reward function - use example reward functions Use RoboMaker to view the simulation","title":"Instruction:"}]}